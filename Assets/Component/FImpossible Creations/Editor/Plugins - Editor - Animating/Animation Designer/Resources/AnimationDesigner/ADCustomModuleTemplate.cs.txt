using FIMSpace.FEditor;
using UnityEditor;
using UnityEngine;

namespace FIMSpace.AnimationTools.CustomModules
{



    // MOVE THIS FILE TO ANIMATION DESIGNER DIRECTORY:
    // Fimpossible Creations/Editor/Plugins - Editor - Animating/Animation Designer/Custom Modules


    // !!! After creating this script file, you need to create module instance in order to use it with Animation Designer !!!
    // Simply go to custom modules category (last one) and hit the button with gear and arrows, there should be displayed
    // menu with options to generate instance of any kind of custom module script in the project under FIMSpace.AnimationTools.CustomModules namespace
    // Go to Custom/#SCRIPTNAME# and it will create instance in the Animation Designer default directory, now you can choose it and 
    // work on animation clip with it!



    public class #SCRIPTNAME# : ADCustomModuleBase
    {
        public override string ModuleTitleName { get { return "Custom/#SCRIPTNAME#"; } }
        public override bool GUIFoldable { get { return false; } }
        public override bool SupportBlending { get { return true; } }


        // Here GUI code which defines variables to tweak and displaying them
        public override void InspectorGUI_ModuleBody(float optionalBlendGhost, ADClipSettings_Main _anim_MainSet, AnimationDesignerSave s, ADClipSettings_CustomModules cModule, ADClipSettings_CustomModules.CustomModuleSet set)
        {
            // !!! The variables defined with 'GetVariable' are saved for each animation clip you modify
            // The variables you set inside module class (like public int...) are global for the setup file instance you will generate

            // Select limb by ID
            var selectedLimb = GetVariable("Limb", null, 0);
            selectedLimb.SetRangeHelperValue(new Vector2(0, s.Limbs.Count-1)); // Limbs count slider
            selectedLimb.GUISpacing = new Vector2(0, 6); // Spacing
            selectedLimb.HideFlag = false;

            // Define vector parameter
            var myVar = GetVariable("Off", null, Vector3.zero);
            myVar.DisplayName = "Offset IK";
            myVar.Tooltip = "Offset IK point by provided vector";

            var limb = GetLimbByID(s, selectedLimb.GetIntValue());

            // Display target limb name
            if (limb == null) EditorGUILayout.LabelField("No Limb Selected!", FGUI_Resources.HeaderStyle);
            else EditorGUILayout.LabelField("Working On " + limb.GetName, FGUI_Resources.HeaderStyle);

            GUILayout.Space(5);

            // Display variables
            base.InspectorGUI_ModuleBody(optionalBlendGhost, _anim_MainSet, s, cModule, set);


            #region Accessing Limb's IK (here just to display "IK is disabled!" info)


            if (limb == null) EditorGUILayout.HelpBox("No Limb with ID = " + selectedLimb.IntV, MessageType.Warning);
            else
            {
                var ik = GetIKClipSettings(s, _anim_MainSet);
                if (ik != null)
                {
                    var limbIK = ik.GetIKSettingsForLimb(limb, s);
                    if (limbIK != null) if (limbIK.Enabled == false) EditorGUILayout.HelpBox("IK for limb '" + limbIK.GetName + "' Is Disabled!", MessageType.Warning);
                }
            }

            #endregion


        }



        // Here 'Update()' execution
        public override void OnInfluenceIKUpdate(float animationProgress, float deltaTime, AnimationDesignerSave s, ADClipSettings_Main anim_MainSet, ADClipSettings_CustomModules customModules, ADClipSettings_CustomModules.CustomModuleSet set)
        {
            Transform animator = s.LatestAnimator;
            if (animator == null) return; // No Animator - No Algorithm

            base.OnInfluenceIKUpdate(animationProgress, deltaTime, s, anim_MainSet, customModules, set);

            // Read variables defined inside 'InspectorGUI_ModuleBody()' above
            var selectedLimb = GetVariable("Limb", null, 0);
            int limbId = selectedLimb.GetIntValue();

            // Access selected limb IK to modify it
            var limb = GetLimbByID(s, limbId);

            #region Protection Checks to prevent console log errors in exception cases

            if (limb == null) return; // Limb not exists! Don't do anything then to prevent errors

            var ik = GetIKClipSettings(s, anim_MainSet);
            if (ik == null) return; // IK Setup not exists! Don't do anything then to prevent errors

            var limbIK = ik.GetIKSettingsForLimb(limb, s);
            if (limbIK == null) return; // No IK for the selected limb!

            if (limbIK.Enabled == false) return;

            #endregion


            var myVar = GetVariable("Off", null, Vector3.zero);
            Vector3 offset = myVar.GetVector3Value();

            float blend = GetEvaluatedBlend(set, animationProgress);
            offset *= blend;


            if (limbIK.IKType == ADClipSettings_IK.IKSet.EIKType.FootIK)
            {
                var ikProc = limb.IKLegProcessor;
                ikProc.IKTargetPosition += offset;
            }
            else if (limbIK.IKType == ADClipSettings_IK.IKSet.EIKType.ArmIK)
            {
                var ikProc = limb.IKArmProcessor;
                ikProc.IKTargetPosition += offset;
            }

        }
    }
}